<?php
/**
 * JobApi
 * PHP version 7.3
 *
 * @category Class
 * @package  HiCo\EventManagerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HighCohesion API
 *
 * HighCohesion API [https://highcohesion.co.uk](https://highcohesion.co.uk)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@highcohesion.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HiCo\EventManagerClient\Service;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use HiCo\EventManagerClient\ApiException;
use HiCo\EventManagerClient\Configuration;
use HiCo\EventManagerClient\HeaderSelector;
use HiCo\EventManagerClient\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  HiCo\EventManagerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JobApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createJob
     *
     * Create a new job
     *
     * @param  string $organisationId organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobRequest $jobRequest jobRequest (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\AsyncResponse
     */
    public function createJob($organisationId = null, $jobRequest = null)
    {
        list($response) = $this->createJobWithHttpInfo($organisationId, $jobRequest);
        return $response;
    }

    /**
     * Operation createJobWithHttpInfo
     *
     * Create a new job
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobRequest $jobRequest (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\AsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJobWithHttpInfo($organisationId = null, $jobRequest = null)
    {
        $request = $this->createJobRequest($organisationId, $jobRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\HiCo\EventManagerClient\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJobAsync
     *
     * Create a new job
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobRequest $jobRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJobAsync($organisationId = null, $jobRequest = null)
    {
        return $this->createJobAsyncWithHttpInfo($organisationId, $jobRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createJobAsyncWithHttpInfo
     *
     * Create a new job
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobRequest $jobRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJobAsyncWithHttpInfo($organisationId = null, $jobRequest = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
        $request = $this->createJobRequest($organisationId, $jobRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createJob'
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobRequest $jobRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createJobRequest($organisationId = null, $jobRequest = null)
    {

        $resourcePath = '/event_manager/job';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisationId !== null) {
            $headerParams['Organisation-Id'] = ObjectSerializer::toHeaderValue($organisationId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($jobRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($jobRequest));
            } else {
                $httpBody = $jobRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $headers['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createJobSchedule
     *
     * Create a job schedule
     *
     * @param  string $organisationId organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobScheduleRequest $jobScheduleRequest jobScheduleRequest (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\AsyncResponse
     */
    public function createJobSchedule($organisationId = null, $jobScheduleRequest = null)
    {
        list($response) = $this->createJobScheduleWithHttpInfo($organisationId, $jobScheduleRequest);
        return $response;
    }

    /**
     * Operation createJobScheduleWithHttpInfo
     *
     * Create a job schedule
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobScheduleRequest $jobScheduleRequest (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\AsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJobScheduleWithHttpInfo($organisationId = null, $jobScheduleRequest = null)
    {
        $request = $this->createJobScheduleRequest($organisationId, $jobScheduleRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\HiCo\EventManagerClient\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJobScheduleAsync
     *
     * Create a job schedule
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobScheduleRequest $jobScheduleRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJobScheduleAsync($organisationId = null, $jobScheduleRequest = null)
    {
        return $this->createJobScheduleAsyncWithHttpInfo($organisationId, $jobScheduleRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createJobScheduleAsyncWithHttpInfo
     *
     * Create a job schedule
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobScheduleRequest $jobScheduleRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJobScheduleAsyncWithHttpInfo($organisationId = null, $jobScheduleRequest = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
        $request = $this->createJobScheduleRequest($organisationId, $jobScheduleRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createJobSchedule'
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\JobScheduleRequest $jobScheduleRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createJobScheduleRequest($organisationId = null, $jobScheduleRequest = null)
    {

        $resourcePath = '/event_manager/job/schedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisationId !== null) {
            $headerParams['Organisation-Id'] = ObjectSerializer::toHeaderValue($organisationId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($jobScheduleRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($jobScheduleRequest));
            } else {
                $httpBody = $jobScheduleRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $headers['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJobById
     *
     * Get a job by job id
     *
     * @param  string $jobId The job id (required)
     * @param  string $organisationId organisationId (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\Job|\HiCo\EventManagerClient\Model\ErrorResponse
     */
    public function getJobById($jobId, $organisationId = null)
    {
        list($response) = $this->getJobByIdWithHttpInfo($jobId, $organisationId);
        return $response;
    }

    /**
     * Operation getJobByIdWithHttpInfo
     *
     * Get a job by job id
     *
     * @param  string $jobId The job id (required)
     * @param  string $organisationId (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\Job|\HiCo\EventManagerClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobByIdWithHttpInfo($jobId, $organisationId = null)
    {
        $request = $this->getJobByIdRequest($jobId, $organisationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\HiCo\EventManagerClient\Model\Job' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\Job', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\HiCo\EventManagerClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\Job';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\Job',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJobByIdAsync
     *
     * Get a job by job id
     *
     * @param  string $jobId The job id (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobByIdAsync($jobId, $organisationId = null)
    {
        return $this->getJobByIdAsyncWithHttpInfo($jobId, $organisationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobByIdAsyncWithHttpInfo
     *
     * Get a job by job id
     *
     * @param  string $jobId The job id (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobByIdAsyncWithHttpInfo($jobId, $organisationId = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\Job';
        $request = $this->getJobByIdRequest($jobId, $organisationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJobById'
     *
     * @param  string $jobId The job id (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJobByIdRequest($jobId, $organisationId = null)
    {
        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling getJobById'
            );
        }

        $resourcePath = '/event_manager/job/{job_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisationId !== null) {
            $headerParams['Organisation-Id'] = ObjectSerializer::toHeaderValue($organisationId);
        }

        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $headers['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJobsBy
     *
     * Get a list of jobs by
     *
     * @param  string $organisationId organisationId (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id of the job (optional)
     * @param  string $status The job status (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\Job[]|\HiCo\EventManagerClient\Model\ErrorResponse
     */
    public function getJobsBy($organisationId = null, $jobId = null, $streamId = null, $status = null)
    {
        list($response) = $this->getJobsByWithHttpInfo($organisationId, $jobId, $streamId, $status);
        return $response;
    }

    /**
     * Operation getJobsByWithHttpInfo
     *
     * Get a list of jobs by
     *
     * @param  string $organisationId (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id of the job (optional)
     * @param  string $status The job status (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\Job[]|\HiCo\EventManagerClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobsByWithHttpInfo($organisationId = null, $jobId = null, $streamId = null, $status = null)
    {
        $request = $this->getJobsByRequest($organisationId, $jobId, $streamId, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\HiCo\EventManagerClient\Model\Job[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\Job[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\HiCo\EventManagerClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\Job[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\Job[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJobsByAsync
     *
     * Get a list of jobs by
     *
     * @param  string $organisationId (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id of the job (optional)
     * @param  string $status The job status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobsByAsync($organisationId = null, $jobId = null, $streamId = null, $status = null)
    {
        return $this->getJobsByAsyncWithHttpInfo($organisationId, $jobId, $streamId, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobsByAsyncWithHttpInfo
     *
     * Get a list of jobs by
     *
     * @param  string $organisationId (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id of the job (optional)
     * @param  string $status The job status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobsByAsyncWithHttpInfo($organisationId = null, $jobId = null, $streamId = null, $status = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\Job[]';
        $request = $this->getJobsByRequest($organisationId, $jobId, $streamId, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJobsBy'
     *
     * @param  string $organisationId (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id of the job (optional)
     * @param  string $status The job status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJobsByRequest($organisationId = null, $jobId = null, $streamId = null, $status = null)
    {

        $resourcePath = '/event_manager/job';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($jobId !== null) {
            if('form' === 'form' && is_array($jobId)) {
                foreach($jobId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['job_id'] = $jobId;
            }
        }
        // query params
        if ($streamId !== null) {
            if('form' === 'form' && is_array($streamId)) {
                foreach($streamId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['stream_id'] = $streamId;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }

        // header params
        if ($organisationId !== null) {
            $headerParams['Organisation-Id'] = ObjectSerializer::toHeaderValue($organisationId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $headers['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replicateJob
     *
     * Replicate job
     *
     * @param  string $organisationId organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateJobRequest $replicateJobRequest replicateJobRequest (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\AsyncResponse
     */
    public function replicateJob($organisationId = null, $replicateJobRequest = null)
    {
        list($response) = $this->replicateJobWithHttpInfo($organisationId, $replicateJobRequest);
        return $response;
    }

    /**
     * Operation replicateJobWithHttpInfo
     *
     * Replicate job
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateJobRequest $replicateJobRequest (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\AsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function replicateJobWithHttpInfo($organisationId = null, $replicateJobRequest = null)
    {
        $request = $this->replicateJobRequest($organisationId, $replicateJobRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\HiCo\EventManagerClient\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replicateJobAsync
     *
     * Replicate job
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateJobRequest $replicateJobRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replicateJobAsync($organisationId = null, $replicateJobRequest = null)
    {
        return $this->replicateJobAsyncWithHttpInfo($organisationId, $replicateJobRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replicateJobAsyncWithHttpInfo
     *
     * Replicate job
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateJobRequest $replicateJobRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replicateJobAsyncWithHttpInfo($organisationId = null, $replicateJobRequest = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
        $request = $this->replicateJobRequest($organisationId, $replicateJobRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replicateJob'
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateJobRequest $replicateJobRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replicateJobRequest($organisationId = null, $replicateJobRequest = null)
    {

        $resourcePath = '/event_manager/job/replicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisationId !== null) {
            $headerParams['Organisation-Id'] = ObjectSerializer::toHeaderValue($organisationId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($replicateJobRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($replicateJobRequest));
            } else {
                $httpBody = $replicateJobRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $headers['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJob
     *
     * Update job
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateJobRequest $updateJobRequest The fields to update (required)
     * @param  string $organisationId organisationId (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\AsyncResponse
     */
    public function updateJob($updateJobRequest, $organisationId = null)
    {
        list($response) = $this->updateJobWithHttpInfo($updateJobRequest, $organisationId);
        return $response;
    }

    /**
     * Operation updateJobWithHttpInfo
     *
     * Update job
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateJobRequest $updateJobRequest The fields to update (required)
     * @param  string $organisationId (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\AsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJobWithHttpInfo($updateJobRequest, $organisationId = null)
    {
        $request = $this->updateJobRequest($updateJobRequest, $organisationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\HiCo\EventManagerClient\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateJobAsync
     *
     * Update job
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateJobRequest $updateJobRequest The fields to update (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJobAsync($updateJobRequest, $organisationId = null)
    {
        return $this->updateJobAsyncWithHttpInfo($updateJobRequest, $organisationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateJobAsyncWithHttpInfo
     *
     * Update job
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateJobRequest $updateJobRequest The fields to update (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJobAsyncWithHttpInfo($updateJobRequest, $organisationId = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
        $request = $this->updateJobRequest($updateJobRequest, $organisationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateJob'
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateJobRequest $updateJobRequest The fields to update (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateJobRequest($updateJobRequest, $organisationId = null)
    {
        // verify the required parameter 'updateJobRequest' is set
        if ($updateJobRequest === null || (is_array($updateJobRequest) && count($updateJobRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateJobRequest when calling updateJob'
            );
        }

        $resourcePath = '/event_manager/job';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisationId !== null) {
            $headerParams['Organisation-Id'] = ObjectSerializer::toHeaderValue($organisationId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($updateJobRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($updateJobRequest));
            } else {
                $httpBody = $updateJobRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $headers['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
