<?php
/**
 * EventApi
 * PHP version 7.3
 *
 * @category Class
 * @package  HiCo\EventManagerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HighCohesion API
 *
 * HighCohesion API [https://highcohesion.co.uk](https://highcohesion.co.uk)
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: admin@highcohesion.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HiCo\EventManagerClient\Service;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use HiCo\EventManagerClient\ApiException;
use HiCo\EventManagerClient\Configuration;
use HiCo\EventManagerClient\HeaderSelector;
use HiCo\EventManagerClient\ObjectSerializer;

/**
 * EventApi Class Doc Comment
 *
 * @category Class
 * @package  HiCo\EventManagerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEventById
     *
     * Get an event by event id
     *
     * @param  string $eventId The event id (required)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\Event|\HiCo\EventManagerClient\Model\ErrorResponse
     */
    public function getEventById($eventId)
    {
        list($response) = $this->getEventByIdWithHttpInfo($eventId);
        return $response;
    }

    /**
     * Operation getEventByIdWithHttpInfo
     *
     * Get an event by event id
     *
     * @param  string $eventId The event id (required)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\Event|\HiCo\EventManagerClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventByIdWithHttpInfo($eventId)
    {
        $request = $this->getEventByIdRequest($eventId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\HiCo\EventManagerClient\Model\Event' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\Event', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\HiCo\EventManagerClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\Event';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\Event',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventByIdAsync
     *
     * Get an event by event id
     *
     * @param  string $eventId The event id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventByIdAsync($eventId)
    {
        return $this->getEventByIdAsyncWithHttpInfo($eventId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventByIdAsyncWithHttpInfo
     *
     * Get an event by event id
     *
     * @param  string $eventId The event id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventByIdAsyncWithHttpInfo($eventId)
    {
        $returnType = '\HiCo\EventManagerClient\Model\Event';
        $request = $this->getEventByIdRequest($eventId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventById'
     *
     * @param  string $eventId The event id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEventByIdRequest($eventId)
    {
        // verify the required parameter 'eventId' is set
        if ($eventId === null || (is_array($eventId) && count($eventId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventId when calling getEventById'
            );
        }

        $resourcePath = '/event_manager/event/{event_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($eventId !== null) {
            $resourcePath = str_replace(
                '{' . 'event_id' . '}',
                ObjectSerializer::toPathValue($eventId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $headers['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventsBy
     *
     * Get a list of events by
     *
     * @param  string $id The event id (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id (optional)
     * @param  string $status The status (optional)
     * @param  string $limit The limit (limit&#x3D;20 to get the first 20 events) (optional)
     * @param  string $orderBy order by one specific field (orderBy&#x3D;createdAt,desc, orderBy&#x3D;status,asc) (optional)
     * @param  string $offset the position of the first result to retrieve (offset&#x3D;100) (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\Event[]|\HiCo\EventManagerClient\Model\ErrorResponse
     */
    public function getEventsBy($id = null, $jobId = null, $streamId = null, $status = null, $limit = null, $orderBy = null, $offset = null)
    {
        list($response) = $this->getEventsByWithHttpInfo($id, $jobId, $streamId, $status, $limit, $orderBy, $offset);
        return $response;
    }

    /**
     * Operation getEventsByWithHttpInfo
     *
     * Get a list of events by
     *
     * @param  string $id The event id (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id (optional)
     * @param  string $status The status (optional)
     * @param  string $limit The limit (limit&#x3D;20 to get the first 20 events) (optional)
     * @param  string $orderBy order by one specific field (orderBy&#x3D;createdAt,desc, orderBy&#x3D;status,asc) (optional)
     * @param  string $offset the position of the first result to retrieve (offset&#x3D;100) (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\Event[]|\HiCo\EventManagerClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsByWithHttpInfo($id = null, $jobId = null, $streamId = null, $status = null, $limit = null, $orderBy = null, $offset = null)
    {
        $request = $this->getEventsByRequest($id, $jobId, $streamId, $status, $limit, $orderBy, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\HiCo\EventManagerClient\Model\Event[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\Event[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\HiCo\EventManagerClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\Event[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsByAsync
     *
     * Get a list of events by
     *
     * @param  string $id The event id (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id (optional)
     * @param  string $status The status (optional)
     * @param  string $limit The limit (limit&#x3D;20 to get the first 20 events) (optional)
     * @param  string $orderBy order by one specific field (orderBy&#x3D;createdAt,desc, orderBy&#x3D;status,asc) (optional)
     * @param  string $offset the position of the first result to retrieve (offset&#x3D;100) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByAsync($id = null, $jobId = null, $streamId = null, $status = null, $limit = null, $orderBy = null, $offset = null)
    {
        return $this->getEventsByAsyncWithHttpInfo($id, $jobId, $streamId, $status, $limit, $orderBy, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsByAsyncWithHttpInfo
     *
     * Get a list of events by
     *
     * @param  string $id The event id (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id (optional)
     * @param  string $status The status (optional)
     * @param  string $limit The limit (limit&#x3D;20 to get the first 20 events) (optional)
     * @param  string $orderBy order by one specific field (orderBy&#x3D;createdAt,desc, orderBy&#x3D;status,asc) (optional)
     * @param  string $offset the position of the first result to retrieve (offset&#x3D;100) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByAsyncWithHttpInfo($id = null, $jobId = null, $streamId = null, $status = null, $limit = null, $orderBy = null, $offset = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\Event[]';
        $request = $this->getEventsByRequest($id, $jobId, $streamId, $status, $limit, $orderBy, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventsBy'
     *
     * @param  string $id The event id (optional)
     * @param  string $jobId The job id (optional)
     * @param  string $streamId The stream id (optional)
     * @param  string $status The status (optional)
     * @param  string $limit The limit (limit&#x3D;20 to get the first 20 events) (optional)
     * @param  string $orderBy order by one specific field (orderBy&#x3D;createdAt,desc, orderBy&#x3D;status,asc) (optional)
     * @param  string $offset the position of the first result to retrieve (offset&#x3D;100) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEventsByRequest($id = null, $jobId = null, $streamId = null, $status = null, $limit = null, $orderBy = null, $offset = null)
    {

        $resourcePath = '/event_manager/event';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id'] = $id;
            }
        }
        // query params
        if ($jobId !== null) {
            if('form' === 'form' && is_array($jobId)) {
                foreach($jobId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['job_id'] = $jobId;
            }
        }
        // query params
        if ($streamId !== null) {
            if('form' === 'form' && is_array($streamId)) {
                foreach($streamId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['stream_id'] = $streamId;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($orderBy !== null) {
            if('form' === 'form' && is_array($orderBy)) {
                foreach($orderBy as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order_by'] = $orderBy;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $headers['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replicateEvent
     *
     * Replicate Event
     *
     * @param  string $organisationId organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateEventRequest $replicateEventRequest replicateEventRequest (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\AsyncResponse
     */
    public function replicateEvent($organisationId = null, $replicateEventRequest = null)
    {
        list($response) = $this->replicateEventWithHttpInfo($organisationId, $replicateEventRequest);
        return $response;
    }

    /**
     * Operation replicateEventWithHttpInfo
     *
     * Replicate Event
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateEventRequest $replicateEventRequest (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\AsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function replicateEventWithHttpInfo($organisationId = null, $replicateEventRequest = null)
    {
        $request = $this->replicateEventRequest($organisationId, $replicateEventRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\HiCo\EventManagerClient\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replicateEventAsync
     *
     * Replicate Event
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateEventRequest $replicateEventRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replicateEventAsync($organisationId = null, $replicateEventRequest = null)
    {
        return $this->replicateEventAsyncWithHttpInfo($organisationId, $replicateEventRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replicateEventAsyncWithHttpInfo
     *
     * Replicate Event
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateEventRequest $replicateEventRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replicateEventAsyncWithHttpInfo($organisationId = null, $replicateEventRequest = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
        $request = $this->replicateEventRequest($organisationId, $replicateEventRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replicateEvent'
     *
     * @param  string $organisationId (optional)
     * @param  \HiCo\EventManagerClient\Model\ReplicateEventRequest $replicateEventRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replicateEventRequest($organisationId = null, $replicateEventRequest = null)
    {

        $resourcePath = '/event_manager/event/replicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisationId !== null) {
            $headerParams['organisation-id'] = ObjectSerializer::toHeaderValue($organisationId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($replicateEventRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($replicateEventRequest));
            } else {
                $httpBody = $replicateEventRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $headers['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChildEvent
     *
     * Update Child Event via the Parent Event ID and the entity name
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateChildEventRequest $updateChildEventRequest The parent ID and entity name identify the child event, the other fields will be updated on that event (required)
     * @param  string $organisationId organisationId (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\AsyncResponse
     */
    public function updateChildEvent($updateChildEventRequest, $organisationId = null)
    {
        list($response) = $this->updateChildEventWithHttpInfo($updateChildEventRequest, $organisationId);
        return $response;
    }

    /**
     * Operation updateChildEventWithHttpInfo
     *
     * Update Child Event via the Parent Event ID and the entity name
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateChildEventRequest $updateChildEventRequest The parent ID and entity name identify the child event, the other fields will be updated on that event (required)
     * @param  string $organisationId (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\AsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateChildEventWithHttpInfo($updateChildEventRequest, $organisationId = null)
    {
        $request = $this->updateChildEventRequest($updateChildEventRequest, $organisationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\HiCo\EventManagerClient\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateChildEventAsync
     *
     * Update Child Event via the Parent Event ID and the entity name
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateChildEventRequest $updateChildEventRequest The parent ID and entity name identify the child event, the other fields will be updated on that event (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChildEventAsync($updateChildEventRequest, $organisationId = null)
    {
        return $this->updateChildEventAsyncWithHttpInfo($updateChildEventRequest, $organisationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateChildEventAsyncWithHttpInfo
     *
     * Update Child Event via the Parent Event ID and the entity name
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateChildEventRequest $updateChildEventRequest The parent ID and entity name identify the child event, the other fields will be updated on that event (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChildEventAsyncWithHttpInfo($updateChildEventRequest, $organisationId = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
        $request = $this->updateChildEventRequest($updateChildEventRequest, $organisationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChildEvent'
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateChildEventRequest $updateChildEventRequest The parent ID and entity name identify the child event, the other fields will be updated on that event (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateChildEventRequest($updateChildEventRequest, $organisationId = null)
    {
        // verify the required parameter 'updateChildEventRequest' is set
        if ($updateChildEventRequest === null || (is_array($updateChildEventRequest) && count($updateChildEventRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateChildEventRequest when calling updateChildEvent'
            );
        }

        $resourcePath = '/event_manager/child_event';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisationId !== null) {
            $headerParams['organisation-id'] = ObjectSerializer::toHeaderValue($organisationId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['array']
            );
        }

        // for model (json/xml)
        if (isset($updateChildEventRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($updateChildEventRequest));
            } else {
                $httpBody = $updateChildEventRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $headers['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEvent
     *
     * Update Event
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateEventRequest $updateEventRequest The fields to update (required)
     * @param  string $organisationId organisationId (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \HiCo\EventManagerClient\Model\AsyncResponse
     */
    public function updateEvent($updateEventRequest, $organisationId = null)
    {
        list($response) = $this->updateEventWithHttpInfo($updateEventRequest, $organisationId);
        return $response;
    }

    /**
     * Operation updateEventWithHttpInfo
     *
     * Update Event
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateEventRequest $updateEventRequest The fields to update (required)
     * @param  string $organisationId (optional)
     *
     * @throws \HiCo\EventManagerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \HiCo\EventManagerClient\Model\AsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEventWithHttpInfo($updateEventRequest, $organisationId = null)
    {
        $request = $this->updateEventRequest($updateEventRequest, $organisationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\HiCo\EventManagerClient\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\HiCo\EventManagerClient\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\HiCo\EventManagerClient\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEventAsync
     *
     * Update Event
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateEventRequest $updateEventRequest The fields to update (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEventAsync($updateEventRequest, $organisationId = null)
    {
        return $this->updateEventAsyncWithHttpInfo($updateEventRequest, $organisationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEventAsyncWithHttpInfo
     *
     * Update Event
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateEventRequest $updateEventRequest The fields to update (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEventAsyncWithHttpInfo($updateEventRequest, $organisationId = null)
    {
        $returnType = '\HiCo\EventManagerClient\Model\AsyncResponse';
        $request = $this->updateEventRequest($updateEventRequest, $organisationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEvent'
     *
     * @param  \HiCo\EventManagerClient\Model\UpdateEventRequest $updateEventRequest The fields to update (required)
     * @param  string $organisationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEventRequest($updateEventRequest, $organisationId = null)
    {
        // verify the required parameter 'updateEventRequest' is set
        if ($updateEventRequest === null || (is_array($updateEventRequest) && count($updateEventRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateEventRequest when calling updateEvent'
            );
        }

        $resourcePath = '/event_manager/event';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($organisationId !== null) {
            $headerParams['organisation-id'] = ObjectSerializer::toHeaderValue($organisationId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['array']
            );
        }

        // for model (json/xml)
        if (isset($updateEventRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($updateEventRequest));
            } else {
                $httpBody = $updateEventRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $headers['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
